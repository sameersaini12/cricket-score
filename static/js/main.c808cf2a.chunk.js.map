{"version":3,"sources":["Navbar.js","Api.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Button","API_KEY","Card","match","useState","App","matches","setMatches","useEffect","url","fetch","then","response","json","catch","err","console","log","getMatches","data","alert","map","type","key","unique_id","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wTAmBeA,MAff,WACI,OACI,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,CAAQC,SAAS,UAC3B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAASC,MAAM,UAAUC,aAAW,QACnD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAQF,MAAM,WAAd,mBCZEG,EAAU,+BCgDDC,MA7Cf,YAAuB,EAARC,MAAS,IAAD,EAEQC,mBAAS,IAFjB,gCAGKA,oBAAS,IAHd,8BC4BRC,MAzBf,WAAgB,IAAD,EAEiBD,mBAAS,IAF1B,mBAEPE,EAFO,KAEGC,EAFH,KAWb,OAPAC,qBAAU,YFLc,WACtB,IAAMC,EAAI,2CAAD,OAA4CR,GAErD,OAAOS,MAAMD,GAAKE,MAAK,SAACC,GAAD,OACvBA,EAASC,UACRC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,UAAUF,OECpCG,GACCP,MAAK,SAAAQ,GAASZ,EAAWY,EAAKb,SAC/BU,QAAQC,IAAIE,MACXL,OAAM,SAACC,GAAD,OAAQK,MAAM,4BACrB,IAGA,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MAEEc,EAAQe,KAAI,SAAAlB,GAAK,OACf,oCACc,aAAbA,EAAMmB,KAAqB,kBAAC,EAAD,CAAMC,IAAKpB,EAAMqB,UAAWrB,MAAOA,IAAa,SCXlEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c808cf2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar ,Toolbar , IconButton , Button }from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <AppBar position=\"static\">\r\n  <Toolbar>\r\n    <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n      <MenuIcon />\r\n    </IconButton>\r\n    <Button color=\"inherit\">Live Score </Button>\r\n  </Toolbar>\r\n</AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","const API_KEY = \"Zrl6b4uXTbcYTdDSBQxidPFyfHq2\";\r\n\r\n\r\n//get all the matches\r\n\r\nexport const getMatches = ()=> {\r\n    const url=`https://cricapi.com/api/matches/?apikey=${API_KEY}`;\r\n\r\n    return fetch(url).then((response)=>\r\n    response.json())\r\n    .catch(err => console.log(\"Error:-\",err));\r\n}\r\n\r\nexport const getMatchDetail=(id)=> {\r\n    const url=`https://cricapi.com/api/cricketScore/?apikey=${API_KEY}&unique_id=${id}`;\r\n\r\n    return fetch(url)\r\n    .then((response)=> response.json())\r\n    .catch(err => console.log(err));\r\n\r\n}","import React,{useState} from 'react';\r\nimport {getMatchDetail} from './Api';\r\n\r\nfunction Card({match}) {\r\n\r\n    const[detail , setDetail]= useState([]);\r\n    const [open , setOpen] =useState(false);\r\n\r\n    const handleClick = (id) => {\r\n        getMatchDetail(id).then((data)=> {\r\n            console.log(data);\r\n            setDetail(data);\r\n            handleOpen();\r\n        })\r\n    }\r\n\r\n    const handleClose = ()=> {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleOpen = ()=> {\r\n        setOpen(true);\r\n    }\r\n\r\n    const getDialog= ()=>(\r\n        <dialog open={open} >\r\n            Match Details<br />\r\n    <p>{detail.matchStarted ? (\"Match is started\"):(\"Match is not started yet\")}</p><br />\r\n            <span>{detail.score}</span><br />\r\n            <button onClick={handleClose}>Close</button>\r\n        </dialog>\r\n    )\r\n        \r\n    \r\n    \r\n    return (\r\n        //    getMatchCard()\r\n        <div className=\"card\">\r\n            <p>{match['team-1']} vs {match['team-2']}</p>\r\n    <p>Start Time {new Date(match.dateTimeGMT).toLocaleString()}</p>\r\n           <button onClick={()=> {\r\n               handleClick(match.unique_id);\r\n           }}>Show more details</button>\r\n          { getDialog()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport {getMatches} from './Api';\nimport Card from './Card';\n\nfunction App() {\n\n  const[matches , setMatches] = useState([]);\n\n  useEffect(()=> {\n    getMatches()\n    .then(data => {setMatches(data.matches);\n    console.log(data);})\n    .catch((err)=> alert(\"could not load data\"));\n  },[])\n  \n  return (\n    <div className=\"app\">\n      <Navbar />\n      {\n        matches.map(match => (\n          <>\n          {match.type===\"Twenty20\" ? (<Card key={match.unique_id} match={match} />): (\"\")}\n          </>\n        )\n         ) }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}